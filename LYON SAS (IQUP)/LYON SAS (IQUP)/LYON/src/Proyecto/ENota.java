/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Proyecto;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author User
 */
public class ENota extends javax.swing.JFrame {

    mysql con = new mysql();
    Connection cn = (Connection) con.conexion();

    public ENota() {
        initComponents();

        new MenuBD().setVisible(false);

        setSize(639, 536);
        setLocation(400, 100);
        atras.setVisible(true);
        atras.setContentAreaFilled(false);
        atras.setBorderPainted(false);

        menub.setVisible(true);
        menub.setContentAreaFilled(false);
        menub.setBorderPainted(false);

        salir.setVisible(true);
        salir.setContentAreaFilled(false);
        salir.setBorderPainted(false);

        codnota.setVisible(false);
        modify.setVisible(false);

        update.setVisible(true);
        update.setContentAreaFilled(false);
        update.setBorderPainted(false);

        jButton1.setVisible(true);
        jButton1.setContentAreaFilled(false);
        jButton1.setBorderPainted(false);

        back.setVisible(true);
        back.setContentAreaFilled(false);
        back.setBorderPainted(false);

        options.setVisible(true);
        options.setContentAreaFilled(false);
        options.setBorderPainted(false);

        options2.setVisible(false);
        options2.setContentAreaFilled(false);
        options2.setBorderPainted(false);

        next.setVisible(false);
        next.setContentAreaFilled(false);
        next.setBorderPainted(false);

        modify.setText("no");
        mod.setVisible(false);

        transparenciaButton();

        Statement st;
        ResultSet rs;
        String sql, matt;
        sql = "SELECT * from materia";
        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);

            while (rs.next()) {
                matt = rs.getString(2);
                combomateria.addItem("" + matt);

            }
        } catch (SQLException ex) {
            Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
        }

        codmat.setVisible(false);

    }

    public void transparenciaButton() {
        atras.setOpaque(false);
        menub.setOpaque(false);
        salir.setOpaque(false);
        jButton1.setOpaque(false);
        update.setOpaque(false);
        back.setOpaque(false);
        options.setOpaque(false);
        options2.setOpaque(false);
        next.setOpaque(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        salir = new javax.swing.JButton();
        menub = new javax.swing.JButton();
        atras = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        paneledicion = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        notita = new javax.swing.JTextField();
        update = new javax.swing.JButton();
        back = new javax.swing.JButton();
        codnota = new javax.swing.JTextField();
        options = new javax.swing.JButton();
        options2 = new javax.swing.JButton();
        mod = new javax.swing.JPanel();
        combomateria = new javax.swing.JComboBox();
        combotema = new javax.swing.JComboBox();
        next = new javax.swing.JButton();
        modify = new javax.swing.JTextField();
        codmat = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/salir.png"))); // NOI18N
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        getContentPane().add(salir, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 510, -1, -1));

        menub.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/init.png"))); // NOI18N
        menub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menubActionPerformed(evt);
            }
        });
        getContentPane().add(menub, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 510, -1, -1));

        atras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/atras2.png"))); // NOI18N
        atras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atrasActionPerformed(evt);
            }
        });
        getContentPane().add(atras, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 510, 30, -1));

        jLabel3.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("EDITAR NOTA");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/NOTEDIT.png"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 650, 80));

        paneledicion.setBackground(new java.awt.Color(255, 255, 255));
        paneledicion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        paneledicion.setLayout(null);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/borrar_1.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        paneledicion.add(jButton1);
        jButton1.setBounds(430, 300, 60, 60);

        notita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notitaActionPerformed(evt);
            }
        });
        paneledicion.add(notita);
        notita.setBounds(20, 60, 560, 180);

        update.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/girar.png"))); // NOI18N
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        paneledicion.add(update);
        update.setBounds(500, 300, 60, 60);

        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/espalda.png"))); // NOI18N
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        paneledicion.add(back);
        back.setBounds(0, 370, 50, 40);

        codnota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codnotaActionPerformed(evt);
            }
        });
        paneledicion.add(codnota);
        codnota.setBounds(380, 290, 20, 20);

        options.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/matematicas.png"))); // NOI18N
        options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsActionPerformed(evt);
            }
        });
        paneledicion.add(options);
        options.setBounds(40, 260, 50, 40);

        options2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/matematicas - copia.png"))); // NOI18N
        options2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                options2ActionPerformed(evt);
            }
        });
        paneledicion.add(options2);
        options2.setBounds(40, 260, 50, 41);

        mod.setBackground(new java.awt.Color(255, 255, 255));
        mod.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        combomateria.setBackground(new java.awt.Color(204, 204, 204));
        combomateria.setEditable(true);
        combomateria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Materia" }));
        combomateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combomateriaActionPerformed(evt);
            }
        });
        mod.add(combomateria, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 140, 50));

        combotema.setBackground(new java.awt.Color(204, 204, 204));
        combotema.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tema" }));
        combotema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combotemaActionPerformed(evt);
            }
        });
        mod.add(combotema, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 140, 50));

        next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/nextb.png"))); // NOI18N
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });
        mod.add(next, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 50, 50));

        paneledicion.add(mod);
        mod.setBounds(120, 250, 240, 140);
        paneledicion.add(modify);
        modify.setBounds(380, 320, 20, 20);
        paneledicion.add(codmat);
        codmat.setBounds(380, 260, 20, 20);

        getContentPane().add(paneledicion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 600, 410));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/BASICO MEDIDAS.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 650, 560));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_salirActionPerformed

    private void menubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menubActionPerformed
        new Ventana().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_menubActionPerformed

    private void atrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atrasActionPerformed
        new MenuBD().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_atrasActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int cod = 0;
        String dato;
        ResultSet rs;
        Statement st;
        dato = (notita.getText());
        
        
        String sql = "SELECT CodNotaR FROM notar WHERE Contenido='" + dato + "'";
        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                cod = rs.getInt(1);
                codnota.setText("" + cod);
            }

        } catch (SQLException ex) {
            Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            PreparedStatement pps = cn.prepareStatement("DELETE FROM notar WHERE CodNotaR=" + cod);
            pps.executeUpdate();
            JOptionPane.showMessageDialog(null, "NOTA BORRADA");
            dispose();
            new MenuBD().setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(ERecor.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void notitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notitaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_notitaActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        int cod = 0;
        String dato;
        ResultSet rs;
        Statement st;
        dato = (notita.getText());

        String sql = "SELECT CodNotaR FROM notar WHERE Contenido='" + dato + "'";
        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                cod = rs.getInt(1);
                codnota.setText("" + cod);
            }

        } catch (SQLException ex) {
            Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        String cont = notita.getText();
        String ver = modify.getText();

        if (null != ver) {
            switch (ver) {
                case "no":
                   /** try {
                        PreparedStatement pps = cn.prepareStatement("UPDATE notar SET Contenido='" + cont + "' WHERE CodNotaR=" + cod);
                        pps.executeUpdate();
                        JOptionPane.showMessageDialog(null, "Nota actualizada");
                        dispose();
                        new MenuBD().setVisible(true);
                    } catch (SQLException ex) {
                        Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    */
                    
                    int cm=0, ct=0;
                    sql = "SELECT CodMateria, CodTema FROM notar WHERE CodNotaR="+cod;
                    try {
                        st = cn.createStatement();
                        rs = st.executeQuery(sql);
                        while (rs.next()) {
                            cm = rs.getInt(1);
                            ct= rs.getInt(2);
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    String content= notita.getText();
                    
                    sql = "INSERT INTO notar (Contenido, CodTema, CodMateria) VALUES (?,?,?)";

                            try {
                                PreparedStatement pst = cn.prepareStatement(sql);
                                pst.setString(1, content);
                                pst.setInt(2, ct); 
                                pst.setInt(3, cm);
                                int n = pst.executeUpdate();
                                if (n > 0) {
                                    JOptionPane.showMessageDialog(null, "Nota actualizada");
                                }
                            } catch (SQLException ex) {
                                Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
                            }
                    
                    
                    try {
                        PreparedStatement pps = cn.prepareStatement("DELETE FROM notar WHERE CodNotaR=" + cod);
                        pps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(ERecor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    dispose();
                    new MenuBD().setVisible(true);
                    
                    
                    break;
                case "si":
                    String añamateria;
                    añamateria = (String) (combomateria.getSelectedItem());
                    sql = ("SELECT NomMateria FROM materia WHERE NomMateria='" + añamateria + "'");
                    String a = "";
                    try {
                        st = cn.createStatement();
                        rs = st.executeQuery(sql);
                        while (rs.next()) {
                            a = rs.getString(1);
                        }

                        if ("".equals(a)) {
                            sql = "INSERT INTO materia (NomMateria) VALUES (?)";

                            try {
                                PreparedStatement pst = cn.prepareStatement(sql);
                                pst.setString(1, añamateria);
                                int n = pst.executeUpdate();
                                if (n > 0) {
                                    JOptionPane.showMessageDialog(null, "Guardar Materia");
                                }
                            } catch (SQLException ex) {
                                Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
                    }
// consulta cod de la materia
                    int Cod = 1;
                    sql = ("SELECT CodMateria FROM materia WHERE NomMateria='" + añamateria + "'");
                    String datos[] = new String[1];
                    try {
                        st = cn.createStatement();
                        rs = st.executeQuery(sql);
                        while (rs.next()) {
                            datos[0] = rs.getString(1);
                            Cod = Integer.parseInt(datos[0]);
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //tema
                    String añatema;
                    añatema = (String) (combotema.getSelectedItem());

                    sql = ("SELECT NomTema FROM tema WHERE NomTema='" + añatema + "'");
                    String b = "";
                    try {
                        st = cn.createStatement();
                        ResultSet rs1 = st.executeQuery(sql);
                        while (rs1.next()) {
                            b = rs1.getString(1);
                        }

                        if ("".equals(b)) {
                //GUADAR TEMA

                            sql = "INSERT INTO tema (NomTema, CodMateria) VALUES (?,?)";

                            try {
                                PreparedStatement pst = cn.prepareStatement(sql);
                                pst.setString(1, añatema);
                                pst.setInt(2, Cod);
                                int n = pst.executeUpdate();
                                if (n > 0) {
                                    JOptionPane.showMessageDialog(null, "Guardar Tema");
                                }

                            } catch (SQLException ex) {
                                Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    //consultar cod tema
                    int CodTema = 1;
                    String datost[] = new String[1];
                    sql = ("SELECT CodTema FROM tema WHERE NomTema='" + añatema + "'");
                    try {
                        st = cn.createStatement();
                        rs = st.executeQuery(sql);
                        while (rs.next()) {
                            datost[0] = rs.getString(1);
                            CodTema = Integer.parseInt(datost[0]);
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    //aqui
                    sql = "INSERT INTO notar (Contenido, CodTema, CodMateria) VALUES (?,?,?)";

                            try {
                                PreparedStatement pst = cn.prepareStatement(sql);
                                pst.setString(1, cont);
                                pst.setInt(2, CodTema); 
                                pst.setInt(3, Cod);
                                int n = pst.executeUpdate();
                                if (n > 0) {
                                    JOptionPane.showMessageDialog(null, "Nota actualizada");
                                }
                            } catch (SQLException ex) {
                                Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
                            }

                    try {
                        PreparedStatement pps = cn.prepareStatement("DELETE FROM notar WHERE CodNotaR=" + cod);
                        pps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(ERecor.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    dispose();
                    new MenuBD().setVisible(true);

    
                    /**try {
                        PreparedStatement pps = cn.prepareStatement("UPDATE notar SET Contenido='" + cont + "', CodMateria=" + Cod + ", CodTema=" + CodTema + "  WHERE CodNotaR=" + cod);
                        pps.executeUpdate();
                        JOptionPane.showMessageDialog(null, "Nota actualizada");
                        dispose();
                        new MenuBD().setVisible(true);
                    } catch (SQLException ex) {
                        Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
                    }
*/
                    break;
            }
        }

    }//GEN-LAST:event_updateActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed

        new MenuBD().setVisible(true);
        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    private void codnotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codnotaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codnotaActionPerformed

    private void combomateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combomateriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combomateriaActionPerformed

    private void combotemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combotemaActionPerformed

    }//GEN-LAST:event_combotemaActionPerformed

    private void optionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsActionPerformed
        modify.setText("si");
        mod.setVisible(true);
        options.setVisible(false);
        options2.setVisible(true);
        next.setVisible(true);
        combotema.setVisible(false);

        String dato;
        int cod = 0;

        ResultSet rs;
        Statement st;
        dato = (notita.getText());
        String sql = "SELECT CodNotaR FROM notar WHERE Contenido='" + dato + "'";
        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                cod = rs.getInt(1);
                codnota.setText("" + cod);
            }

        } catch (SQLException ex) {
            Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
        }
        int codmatt = 0;
        sql = "SELECT CodMateria FROM notar WHERE CodNotaR=" + cod;
        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                codmatt = rs.getInt(1);
                codmat.setText("" + codmatt);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
        }

        String nom = "";
        sql = "SELECT NomMateria FROM materia WHERE CodMateria=" + codmatt;
        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                nom = rs.getString(1);
                combomateria.setSelectedItem(nom);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_optionsActionPerformed

    private void options2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_options2ActionPerformed
        modify.setText("no");
        mod.setVisible(false);
        options.setVisible(true);
        options2.setVisible(false);
        next.setVisible(false);
        combotema.setVisible(false);
// TODO add your handling code here:
    }//GEN-LAST:event_options2ActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed

        combotema.setVisible(true);
        Statement st;
        ResultSet rs;
        int matt = 0;
        String sql, temmm;
        String materia = (String) (combomateria.getSelectedItem());
        sql = "SELECT CodMateria from materia WHERE NomMateria='" + materia + "'";
        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);

            while (rs.next()) {
                matt = rs.getInt(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
        }
        sql = "SELECT NomTema from tema WHERE CodMateria=" + matt;
        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                temmm = rs.getString(1);
                combotema.addItem("" + temmm);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ANota.class.getName()).log(Level.SEVERE, null, ex);
        }
        combotema.setEditable(true);

// TODO add your handling code here:
    }//GEN-LAST:event_nextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ENota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ENota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ENota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ENota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ENota().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton atras;
    private javax.swing.JButton back;
    private javax.swing.JTextField codmat;
    public static javax.swing.JTextField codnota;
    private javax.swing.JComboBox combomateria;
    private javax.swing.JComboBox combotema;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton menub;
    private javax.swing.JPanel mod;
    private javax.swing.JTextField modify;
    private javax.swing.JButton next;
    public static javax.swing.JTextField notita;
    private javax.swing.JButton options;
    private javax.swing.JButton options2;
    private javax.swing.JPanel paneledicion;
    private javax.swing.JButton salir;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
